1.1. Yes it deadlocks

1.2. No it does not deadlock. The likelihood of this happening
is quite low, so it's not really expected to happen.

1.3. This flies like no other, without deadlocking.

1.4. Yes, that would be very safe, but it would not be very fast and not
really in the spirit of concurrency. It would require the same lock
to be had for all transfers, resulting in serialized execution.

2.1. This may deadlock because multiple threads lock on the same
ressource, and it is therefore very likely that two threads will wait
for the same resource at the same time. Formally, the program satisifes the
four deadlock conditions:

- Mutual exclusion, as only one resource is held to stop execution
- Hold and wait, as there is a process that can wait while the resource is held
- No preemption, Resources cannot be forcefully taken away
- Circular wait, as there are several processes that can wait for each other.

2.2. This deadlocks and is not really surprising, as deadlocks
can appear, as argued above, but we only got a single deadlock, despite trying excessively

2.3. This is the dump from jvisualvm

	THREAD DUMP:
	Found one Java-level deadlock:
	=============================
	"Thread-4":
	  waiting to lock monitor 0x00007fd8838050b8 (object 0x000000076abecae0, a Fork),
	  which is held by "Thread-0"
	"Thread-0":
	  waiting to lock monitor 0x00007fd8838079f8 (object 0x000000076abecaf0, a Fork),
	  which is held by "Thread-1"
	"Thread-1":
	  waiting to lock monitor 0x00007fd883807948 (object 0x000000076abecb00, a Fork),
	  which is held by "Thread-2"
	"Thread-2":
	  waiting to lock monitor 0x00007fd88308e6a8 (object 0x000000076abecb10, a Fork),
	  which is held by "Thread-3"
	"Thread-3":
	  waiting to lock monitor 0x00007fd88308e5f8 (object 0x000000076abecb20, a Fork),
	  which is held by "Thread-4"
	
	Java stack information for the threads listed above:
	===================================================
	"Thread-4":
		at Philosopher.run(TestPhilosophers.java:43)
		- waiting to lock <0x000000076abecae0> (a Fork)
		- locked <0x000000076abecb20> (a Fork)
		at java.lang.Thread.run(Thread.java:745)
	"Thread-0":
		at Philosopher.run(TestPhilosophers.java:43)
		- waiting to lock <0x000000076abecaf0> (a Fork)
		- locked <0x000000076abecae0> (a Fork)
		at java.lang.Thread.run(Thread.java:745)
	"Thread-1":
		at Philosopher.run(TestPhilosophers.java:43)
		- waiting to lock <0x000000076abecb00> (a Fork)
		- locked <0x000000076abecaf0> (a Fork)
		at java.lang.Thread.run(Thread.java:745)
	"Thread-2":
		at Philosopher.run(TestPhilosophers.java:43)
		- waiting to lock <0x000000076abecb10> (a Fork)
		- locked <0x000000076abecb00> (a Fork)
		at java.lang.Thread.run(Thread.java:745)
	"Thread-3":
		at Philosopher.run(TestPhilosophers.java:43)
		- waiting to lock <0x000000076abecb20> (a Fork)
		- locked <0x000000076abecb10> (a Fork)
		at java.lang.Thread.run(Thread.java:745)
	
	Found 1 deadlock.

So, it tells us that 4 threads are all waiting to lock. 

2.4. 
